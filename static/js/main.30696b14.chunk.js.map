{"version":3,"sources":["components/Navbar.js","components/Jumbo.js","components/Gamepic.js","components/Gameboard.js","components/Footer.js","components/Skeleton.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","style","backgroundColor","fontFamily","score","topScore","Jumbo","Gamepic","maxHeight","maxWidth","src","img","alt","name","onClick","pokeClick","Gameboard","pokedex","Footer","Skeleton","state","guessedPokemon","event","includes","target","setState","push","newScore","shuffle","i","length","j","Math","floor","random","temp","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30696b14.chunk.js","sourcesContent":["import React from 'react';\n\n// This component creates the bar at the top of the page.\nfunction Navbar(props) {\n    return (\n            <div className=\"row sticky-top d-flex justify-content-center text-center poketext\" style={{backgroundColor: \"red\", fontFamily: \"'Luckiest Guy', cursive\"}}>\n                <div className=\"col-md-4\">\n                    <h3 className=\"font-weight-bold\">Pok&#233;Click!</h3>\n                </div>\n                <div className=\"col-md-4\">\n                    <h3>Click an image to begin!</h3>\n                </div>\n                <div className=\"col-md-4\">\n                    {/* The compent gets the current score and high score from Skeleton via props. */}\n                    <h3>Score: {props.score} | Top Score: {props.topScore}</h3>\n                </div>\n             </div>\n\n    )\n}\n\nexport default Navbar;","import React from 'react';\n\n// This component creates the main title area of the page.\nfunction Jumbo() {\n    return (\n        <div className=\"row\">\n            <div className=\"col-md-12\">\n                <div className=\"jumbotron jumbotron-fluid text-center\" style={{fontFamily: \"'Luckiest Guy', cursive\", backgroundColor: \"black\"}}>\n                    <div className=\"container\">\n                        <h1 className=\"display-4 text-danger font-weight-bold\">Pok&#233;Click!</h1>\n                        <p className=\"lead text-danger font-weight-bold\">Click on a Pok&#233;mon to earn points, but don't click on a Pok&#233;mon more than once!</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Jumbo;","import React from 'react';\n\n// This component creates the Pokemon images seen on the gameboard.\nfunction Gamepic(props) {\n    return (\n        <div className=\"col-md-3\">\n            <div className=\"card shadow p-3 mb-5 bg-white rounded\" style={{maxHeight: \"225px\", maxWidth: \"225px\"}}>\n                <img src={props.img} className=\"card-img-top\" alt={props.name} onClick={props.pokeClick}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Gamepic;","import React from 'react';\nimport Gamepic from './Gamepic';\n\n// This component lays out the main gameboard and passes the pokemon info to the Gamepic component so it can create the pictures.\nfunction Gameboard(props) {\n    return (\n        <div className=\"justify-content-center\">\n            <div className=\"row\">\n                    <Gamepic name={props.pokedex[0].name} img={props.pokedex[0].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[1].name} img={props.pokedex[1].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[2].name} img={props.pokedex[2].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[3].name} img={props.pokedex[3].img} pokeClick={props.pokeClick}/>\n            </div>\n            <div className=\"row\">\n                    <Gamepic name={props.pokedex[4].name} img={props.pokedex[4].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[5].name} img={props.pokedex[5].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[6].name} img={props.pokedex[6].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[7].name} img={props.pokedex[7].img} pokeClick={props.pokeClick}/>\n            </div>\n            <div className=\"row\">\n                    <Gamepic name={props.pokedex[8].name} img={props.pokedex[8].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[9].name} img={props.pokedex[9].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[10].name} img={props.pokedex[10].img} pokeClick={props.pokeClick}/>\n                    <Gamepic name={props.pokedex[11].name} img={props.pokedex[11].img} pokeClick={props.pokeClick}/>\n            </div>\n        </div>\n    )\n}\nexport default Gameboard;","import React from 'react';\n\n// This component creates the bar at the bottom of the page. Nothing fancy here.\nfunction Footer() {\n    return (\n        <div className=\"row fluid mt-4\" style={{backgroundColor: \"red\", fontFamily: \"'Luckiest Guy', cursive\"}}>\n            <div className=\"col-md-12\">\n                <br />\n                <br />\n                <p>Pok&#233;Click!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Navbar from './Navbar';\nimport Jumbo from './Jumbo';\nimport Gameboard from './Gameboard';\nimport pokedex from '../pokedex.json';\nimport Footer from './Footer';\n\n// Skeleton is the core of this app. It sets out the general structure of the page and holds the core logic of the game. By having that logic hear, necessary information can be pass to and between the children components.\nclass Skeleton extends React.Component {\n\n    // Here we establish some key variables within the state of this component so that can be updated and passed to different children components\n    state = {\n        score: 0,\n        topScore: 0,\n        guessedPokemon: [],\n        pokedex: pokedex\n    };\n\n    // This is the logic that drives the game. If the pokemon has been clicken in the past, the score resets. Otherwise, the user gains a point and we check to see if there's a new high score.\n    pokeClick = event => {\n        if (this.state.guessedPokemon.includes(event.target.alt)) {\n            this.setState({\n                score: 0,\n                guessedPokemon: []\n            });\n        } else {\n            this.state.guessedPokemon.push(event.target.alt);\n            let newScore = this.state.score + 1;\n            if (newScore > this.state.topScore) {\n                this.setState({\n                    score: newScore,\n                    topScore: newScore\n                })\n            } else {\n                this.setState({ score: newScore })\n            };\n        };\n    }\n\n    // This function shuffles the data within the pokedex array so that the pokemon appear in a random order.\n    shuffle = () => {\n        // Shuffling my pictures with a Fisher-Yates algorithm I learned here: https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\n        for (let i = pokedex.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * i)\n            const temp = pokedex[i]\n            pokedex[i] = pokedex[j]\n            pokedex[j] = temp\n        }\n    }\n\n    // Here we set out the general layout of the page and pass needed info to children compents via props.\n    render() {\n        this.shuffle();\n        return (\n            <div>\n                <div className=\"container-fluid\">\n                    <Navbar score={this.state.score} topScore={this.state.topScore} />\n                    <Jumbo />\n                    <Gameboard pokeClick={this.pokeClick} pokedex={this.state.pokedex}/>\n                    <Footer />\n                </div>\n            </div>\n        )\n    }\n}\nexport default Skeleton;","import React from 'react';\nimport Skeleton from './components/Skeleton';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Skeleton />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}